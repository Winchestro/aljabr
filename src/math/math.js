import { Property, Properties, Getters, Setters, GetterSetters, E, C, W } from "../utilities/PropertyDescriptors.js";

import vec2 from "./vec2.js";
import vec3 from "./vec3.js";
import vec4 from "./vec4.js";
import quat4 from "./quat4.js";

import mat2 from "./mat2.js";
import mat3 from "./mat3.js";
import mat4 from "./mat4.js";

export { mat4, mat3, mat2 ,vec2, vec3, vec4, quat4 };



//TESTS
/*
var test = {
	is : function assert( statement ) {
		console.assert( statement );
		return this;
	}
};

var m2a = new mat2( 4, 3, 2, 1 ); var m2b = new mat2; test

	.is( m2a[ 0 ][ 0 ] === 4 ).is( m2a[ 0 ][ 1 ] === 3 )
	.is( m2a[ 1 ][ 0 ] === 2 ).is( m2a[ 1 ][ 1 ] === 1 )

	.is( m2b[ 0 ][ 0 ] === 1 ).is( m2b[ 0 ][ 1 ] === 0 )
	.is( m2b[ 1 ][ 0 ] === 0 ).is( m2b[ 1 ][ 1 ] === 1 )
	;
m2a.set( 1, 2, 3, 4 ); test

	.is( m2a[ 0 ][ 0 ] === 1 ).is( m2a[ 0 ][ 1 ] === 2 )
	.is( m2a[ 1 ][ 0 ] === 3 ).is( m2a[ 1 ][ 1 ] === 4 )
	;
m2a.transpose(); test

	.is( m2a[ 0 ][ 0 ] === 1 ).is( m2a[ 0 ][ 1 ] === 3 )
	.is( m2a[ 1 ][ 0 ] === 2 ).is( m2a[ 1 ][ 1 ] === 4 )
	; //console.log( "transpose", "=", m2a.data );
m2a.add( m2b ); test

	.is( m2a[ 0 ][ 0 ] === 2 ).is( m2a[ 0 ][ 1 ] === 3 )
	.is( m2a[ 1 ][ 0 ] === 2 ).is( m2a[ 1 ][ 1 ] === 5 )

	.is( m2b[ 0 ][ 0 ] === 1 ).is( m2b[ 0 ][ 1 ] === 0 )
	.is( m2b[ 1 ][ 0 ] === 0 ).is( m2b[ 1 ][ 1 ] === 1 )
	; //console.log( "+", m2b.data, "=", m2a.data );
m2a.multiply( m2b ); test
	
	.is( m2a[ 0 ][ 0 ] === 2 ).is( m2a[ 0 ][ 1 ] === 3 )
	.is( m2a[ 1 ][ 0 ] === 2 ).is( m2a[ 1 ][ 1 ] === 5 )

	.is( m2b[ 0 ][ 0 ] === 1 ).is( m2b[ 0 ][ 1 ] === 0 )
	.is( m2b[ 1 ][ 0 ] === 0 ).is( m2b[ 1 ][ 1 ] === 1 )
	; //console.log( "*", m2b.data, "=", m2a.data );
m2a.addScalar( 1 ); test
	
	.is( m2a[ 0 ][ 0 ] === 3 ).is( m2a[ 0 ][ 1 ] === 4 )
	.is( m2a[ 1 ][ 0 ] === 3 ).is( m2a[ 1 ][ 1 ] === 6 )
	; //console.log( "+", 1, "=", m2a.data );
m2a.multiplyScalar( 2 ); test

	.is( m2a[ 0 ][ 0 ] === 6 ).is( m2a[ 0 ][ 1 ] === 8 )
	.is( m2a[ 1 ][ 0 ] === 6 ).is( m2a[ 1 ][ 1 ] === 12 )
	; //console.log( "*", 2, "=", m2a.data );
var m2c = mat2.add( m2a, m2b ); test
	
	.is( m2a[ 0 ][ 0 ] === 6 ).is( m2a[ 0 ][ 1 ] === 8 )
	.is( m2a[ 1 ][ 0 ] === 6 ).is( m2a[ 1 ][ 1 ] === 12 )

	.is( m2b[ 0 ][ 0 ] === 1 ).is( m2b[ 0 ][ 1 ] === 0 )
	.is( m2b[ 1 ][ 0 ] === 0 ).is( m2b[ 1 ][ 1 ] === 1 )

	.is( m2c[ 0 ][ 0 ] === 7 ).is( m2c[ 0 ][ 1 ] === 8 )
	.is( m2c[ 1 ][ 0 ] === 6 ).is( m2c[ 1 ][ 1 ] === 13 )
	; //console.log( m2a.data, "+", m2b.data, "=", m2c.data );
var m2c = mat2.addScalar( m2a, 1 ); test
	
	.is( m2a[ 0 ][ 0 ] === 6 ).is( m2a[ 0 ][ 1 ] === 8 )
	.is( m2a[ 1 ][ 0 ] === 6 ).is( m2a[ 1 ][ 1 ] === 12 )

	.is( m2c[ 0 ][ 0 ] === 7 ).is( m2c[ 0 ][ 1 ] === 9 )
	.is( m2c[ 1 ][ 0 ] === 7 ).is( m2c[ 1 ][ 1 ] === 13 )
	; //console.log( m2a.data, "+", 1, "=", m2c.data );
var m2c = mat2.multiply( m2a, m2b ); test
	
	.is( m2a[ 0 ][ 0 ] === 6 ).is( m2a[ 0 ][ 1 ] === 8 )
	.is( m2a[ 1 ][ 0 ] === 6 ).is( m2a[ 1 ][ 1 ] === 12 )

	.is( m2b[ 0 ][ 0 ] === 1 ).is( m2b[ 0 ][ 1 ] === 0 )
	.is( m2b[ 1 ][ 0 ] === 0 ).is( m2b[ 1 ][ 1 ] === 1 )

	.is( m2c[ 0 ][ 0 ] === 6 ).is( m2c[ 0 ][ 1 ] === 8 )
	.is( m2c[ 1 ][ 0 ] === 6 ).is( m2c[ 1 ][ 1 ] === 12 )
	; //console.log( m2a.data, "*", m2b.data, "=", m2c.data );
var m2c = mat2.multiplyScalar( m2a, 2 ); test

	.is( m2a[ 0 ][ 0 ] === 6 ).is( m2a[ 0 ][ 1 ] === 8 )
	.is( m2a[ 1 ][ 0 ] === 6 ).is( m2a[ 1 ][ 1 ] === 12 )

	.is( m2c[ 0 ][ 0 ] === 12 ).is( m2c[ 0 ][ 1 ] === 16 )
	.is( m2c[ 1 ][ 0 ] === 12 ).is( m2c[ 1 ][ 1 ] === 24 )
	; //console.log( m2a.data, "*", 2, "=", m2c.data );

var m3a = new mat3( 9, 8, 7, 6, 5, 4, 3, 2, 1 ); var m3b = new mat3; test

	.is( m3a[ 0 ][ 0 ] === 9 ).is( m3a[ 0 ][ 1 ] === 8 ).is( m3a[ 0 ][ 2 ] === 7 )
	.is( m3a[ 1 ][ 0 ] === 6 ).is( m3a[ 1 ][ 1 ] === 5 ).is( m3a[ 1 ][ 2 ] === 4 )
	.is( m3a[ 2 ][ 0 ] === 3 ).is( m3a[ 2 ][ 1 ] === 2 ).is( m3a[ 2 ][ 2 ] === 1 )

	.is( m3b[ 0 ][ 0 ] === 1 ).is( m3b[ 0 ][ 1 ] === 0 ).is( m3b[ 0 ][ 2 ] === 0 )
	.is( m3b[ 1 ][ 0 ] === 0 ).is( m3b[ 1 ][ 1 ] === 1 ).is( m3b[ 1 ][ 2 ] === 0 )
	.is( m3b[ 2 ][ 0 ] === 0 ).is( m3b[ 2 ][ 1 ] === 0 ).is( m3b[ 2 ][ 2 ] === 1 )
	;
m3a.set( 1, 2, 3, 4, 5, 6, 7, 8, 9 ); test

	.is( m3a[ 0 ][ 0 ] === 1 ).is( m3a[ 0 ][ 1 ] === 2 ).is( m3a[ 0 ][ 2 ] === 3 )
	.is( m3a[ 1 ][ 0 ] === 4 ).is( m3a[ 1 ][ 1 ] === 5 ).is( m3a[ 1 ][ 2 ] === 6 )
	.is( m3a[ 2 ][ 0 ] === 7 ).is( m3a[ 2 ][ 1 ] === 8 ).is( m3a[ 2 ][ 2 ] === 9 )
	;
m3a.transpose(); test

	.is( m3a[ 0 ][ 0 ] === 1 ).is( m3a[ 0 ][ 1 ] === 4 ).is( m3a[ 0 ][ 2 ] === 7 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 5 ).is( m3a[ 1 ][ 2 ] === 8 )
	.is( m3a[ 2 ][ 0 ] === 3 ).is( m3a[ 2 ][ 1 ] === 6 ).is( m3a[ 2 ][ 2 ] === 9 )
	;
m3a.add( m3b ); test

	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 4 ).is( m3a[ 0 ][ 2 ] === 7 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 6 ).is( m3a[ 1 ][ 2 ] === 8 )
	.is( m3a[ 2 ][ 0 ] === 3 ).is( m3a[ 2 ][ 1 ] === 6 ).is( m3a[ 2 ][ 2 ] === 10 )

	.is( m3b[ 0 ][ 0 ] === 1 ).is( m3b[ 0 ][ 1 ] === 0 ).is( m3b[ 0 ][ 2 ] === 0 )
	.is( m3b[ 1 ][ 0 ] === 0 ).is( m3b[ 1 ][ 1 ] === 1 ).is( m3b[ 1 ][ 2 ] === 0 )
	.is( m3b[ 2 ][ 0 ] === 0 ).is( m3b[ 2 ][ 1 ] === 0 ).is( m3b[ 2 ][ 2 ] === 1 )
	;
m3b.multiply( m3b ); test

	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 4 ).is( m3a[ 0 ][ 2 ] === 7 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 6 ).is( m3a[ 1 ][ 2 ] === 8 )
	.is( m3a[ 2 ][ 0 ] === 3 ).is( m3a[ 2 ][ 1 ] === 6 ).is( m3a[ 2 ][ 2 ] === 10 )

	.is( m3b[ 0 ][ 0 ] === 1 ).is( m3b[ 0 ][ 1 ] === 0 ).is( m3b[ 0 ][ 2 ] === 0 )
	.is( m3b[ 1 ][ 0 ] === 0 ).is( m3b[ 1 ][ 1 ] === 1 ).is( m3b[ 1 ][ 2 ] === 0 )
	.is( m3b[ 2 ][ 0 ] === 0 ).is( m3b[ 2 ][ 1 ] === 0 ).is( m3b[ 2 ][ 2 ] === 1 )
	;
m3a.addScalar( -1 ); test
	
	.is( m3a[ 0 ][ 0 ] === 1 ).is( m3a[ 0 ][ 1 ] === 3 ).is( m3a[ 0 ][ 2 ] === 6 )
	.is( m3a[ 1 ][ 0 ] === 1 ).is( m3a[ 1 ][ 1 ] === 5 ).is( m3a[ 1 ][ 2 ] === 7 )
	.is( m3a[ 2 ][ 0 ] === 2 ).is( m3a[ 2 ][ 1 ] === 5 ).is( m3a[ 2 ][ 2 ] === 9 )
	;
m3a.multiplyScalar( 2 ); test

	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 6 ).is( m3a[ 0 ][ 2 ] === 12 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 10 ).is( m3a[ 1 ][ 2 ] === 14 )
	.is( m3a[ 2 ][ 0 ] === 4 ).is( m3a[ 2 ][ 1 ] === 10 ).is( m3a[ 2 ][ 2 ] === 18 )
	;
var m3c = mat3.add( m3a, m3b ); test
	
	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 6 ).is( m3a[ 0 ][ 2 ] === 12 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 10 ).is( m3a[ 1 ][ 2 ] === 14 )
	.is( m3a[ 2 ][ 0 ] === 4 ).is( m3a[ 2 ][ 1 ] === 10 ).is( m3a[ 2 ][ 2 ] === 18 )

	.is( m3b[ 0 ][ 0 ] === 1 ).is( m3b[ 0 ][ 1 ] === 0 ).is( m3b[ 0 ][ 2 ] === 0 )
	.is( m3b[ 1 ][ 0 ] === 0 ).is( m3b[ 1 ][ 1 ] === 1 ).is( m3b[ 1 ][ 2 ] === 0 )
	.is( m3b[ 2 ][ 0 ] === 0 ).is( m3b[ 2 ][ 1 ] === 0 ).is( m3b[ 2 ][ 2 ] === 1 )

	.is( m3c[ 0 ][ 0 ] === 3 ).is( m3c[ 0 ][ 1 ] === 6 ).is( m3c[ 0 ][ 2 ] === 12 )
	.is( m3c[ 1 ][ 0 ] === 2 ).is( m3c[ 1 ][ 1 ] === 11 ).is( m3c[ 1 ][ 2 ] === 14 )
	.is( m3c[ 2 ][ 0 ] === 4 ).is( m3c[ 2 ][ 1 ] === 10 ).is( m3c[ 2 ][ 2 ] === 19 )
	; //console.log( m3a.data, "+", m3b.data, "=", m3c.data );
var m3c = mat3.addScalar( m3a, -2 ); test
	
	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 6 ).is( m3a[ 0 ][ 2 ] === 12 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 10 ).is( m3a[ 1 ][ 2 ] === 14 )
	.is( m3a[ 2 ][ 0 ] === 4 ).is( m3a[ 2 ][ 1 ] === 10 ).is( m3a[ 2 ][ 2 ] === 18 )

	.is( m3c[ 0 ][ 0 ] === 0 ).is( m3c[ 0 ][ 1 ] === 4 ).is( m3c[ 0 ][ 2 ] === 10 )
	.is( m3c[ 1 ][ 0 ] === 0 ).is( m3c[ 1 ][ 1 ] === 8 ).is( m3c[ 1 ][ 2 ] === 12 )
	.is( m3c[ 2 ][ 0 ] === 2 ).is( m3c[ 2 ][ 1 ] === 8 ).is( m3c[ 2 ][ 2 ] === 16 )
	; //console.log ( m3a.data, "+ -2 =", m3c.data );
var m3c = mat3.multiply( m3a, m3b ); test
	
	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 6 ).is( m3a[ 0 ][ 2 ] === 12 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 10 ).is( m3a[ 1 ][ 2 ] === 14 )
	.is( m3a[ 2 ][ 0 ] === 4 ).is( m3a[ 2 ][ 1 ] === 10 ).is( m3a[ 2 ][ 2 ] === 18 )

	.is( m3b[ 0 ][ 0 ] === 1 ).is( m3b[ 0 ][ 1 ] === 0 ).is( m3b[ 0 ][ 2 ] === 0 )
	.is( m3b[ 1 ][ 0 ] === 0 ).is( m3b[ 1 ][ 1 ] === 1 ).is( m3b[ 1 ][ 2 ] === 0 )
	.is( m3b[ 2 ][ 0 ] === 0 ).is( m3b[ 2 ][ 1 ] === 0 ).is( m3b[ 2 ][ 2 ] === 1 )

	.is( m3c[ 0 ][ 0 ] === 2 ).is( m3c[ 0 ][ 1 ] === 6 ).is( m3c[ 0 ][ 2 ] === 12 )
	.is( m3c[ 1 ][ 0 ] === 2 ).is( m3c[ 1 ][ 1 ] === 10 ).is( m3c[ 1 ][ 2 ] === 14 )
	.is( m3c[ 2 ][ 0 ] === 4 ).is( m3c[ 2 ][ 1 ] === 10 ).is( m3c[ 2 ][ 2 ] === 18 )
	;
var m3c = mat3.multiplyScalar( m3a, .5 ); test
	
	.is( m3a[ 0 ][ 0 ] === 2 ).is( m3a[ 0 ][ 1 ] === 6 ).is( m3a[ 0 ][ 2 ] === 12 )
	.is( m3a[ 1 ][ 0 ] === 2 ).is( m3a[ 1 ][ 1 ] === 10 ).is( m3a[ 1 ][ 2 ] === 14 )
	.is( m3a[ 2 ][ 0 ] === 4 ).is( m3a[ 2 ][ 1 ] === 10 ).is( m3a[ 2 ][ 2 ] === 18 )

	.is( m3c[ 0 ][ 0 ] === 1 ).is( m3c[ 0 ][ 1 ] === 3 ).is( m3c[ 0 ][ 2 ] === 6 )
	.is( m3c[ 1 ][ 0 ] === 1 ).is( m3c[ 1 ][ 1 ] === 5 ).is( m3c[ 1 ][ 2 ] === 7 )
	.is( m3c[ 2 ][ 0 ] === 2 ).is( m3c[ 2 ][ 1 ] === 5 ).is( m3c[ 2 ][ 2 ] === 9 )
	;

var m4a = new mat4( 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 ); var m4b = new mat4; test
	.is( m4a[ 0 ][ 0 ] === 16 ).is( m4a[ 0 ][ 1 ] === 15 ).is( m4a[ 0 ][ 2 ] === 14 ).is( m4a[ 0 ][ 3 ] === 13 )
	.is( m4a[ 1 ][ 0 ] === 12 ).is( m4a[ 1 ][ 1 ] === 11 ).is( m4a[ 1 ][ 2 ] === 10 ).is( m4a[ 1 ][ 3 ] ===  9 )
	.is( m4a[ 2 ][ 0 ] ===  8 ).is( m4a[ 2 ][ 1 ] ===  7 ).is( m4a[ 2 ][ 2 ] ===  6 ).is( m4a[ 2 ][ 3 ] ===  5 )
	.is( m4a[ 3 ][ 0 ] ===  4 ).is( m4a[ 3 ][ 1 ] ===  3 ).is( m4a[ 3 ][ 2 ] ===  2 ).is( m4a[ 3 ][ 3 ] ===  1 )

	.is( m4b[ 0 ][ 0 ] === 1 ).is( m4b[ 0 ][ 1 ] === 0 ).is( m4b[ 0 ][ 2 ] === 0 ).is( m4b[ 0 ][ 3 ] === 0 )
	.is( m4b[ 1 ][ 0 ] === 0 ).is( m4b[ 1 ][ 1 ] === 1 ).is( m4b[ 1 ][ 2 ] === 0 ).is( m4b[ 1 ][ 3 ] === 0 )
	.is( m4b[ 2 ][ 0 ] === 0 ).is( m4b[ 2 ][ 1 ] === 0 ).is( m4b[ 2 ][ 2 ] === 1 ).is( m4b[ 2 ][ 3 ] === 0 )
	.is( m4b[ 3 ][ 0 ] === 0 ).is( m4b[ 3 ][ 1 ] === 0 ).is( m4b[ 3 ][ 2 ] === 0 ).is( m4b[ 3 ][ 3 ] === 1 )
	;
m4a.set( 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16 ); test
	.is( m4a[ 0 ][ 0 ] ===  1 ).is( m4a[ 0 ][ 1 ] ===  2 ).is( m4a[ 0 ][ 2 ] ===  3 ).is( m4a[ 0 ][ 3 ] ===  4 )
	.is( m4a[ 1 ][ 0 ] ===  5 ).is( m4a[ 1 ][ 1 ] ===  6 ).is( m4a[ 1 ][ 2 ] ===  7 ).is( m4a[ 1 ][ 3 ] ===  8 )
	.is( m4a[ 2 ][ 0 ] ===  9 ).is( m4a[ 2 ][ 1 ] === 10 ).is( m4a[ 2 ][ 2 ] === 11 ).is( m4a[ 2 ][ 3 ] === 12 )
	.is( m4a[ 3 ][ 0 ] === 13 ).is( m4a[ 3 ][ 1 ] === 14 ).is( m4a[ 3 ][ 2 ] === 15 ).is( m4a[ 3 ][ 3 ] === 16 )
	;
m4a.add( m4b ); test	
	.is( m4a[ 0 ][ 0 ] ===  2 ).is( m4a[ 0 ][ 1 ] ===  2 ).is( m4a[ 0 ][ 2 ] ===  3 ).is( m4a[ 0 ][ 3 ] ===  4 )
	.is( m4a[ 1 ][ 0 ] ===  5 ).is( m4a[ 1 ][ 1 ] ===  7 ).is( m4a[ 1 ][ 2 ] ===  7 ).is( m4a[ 1 ][ 3 ] ===  8 )
	.is( m4a[ 2 ][ 0 ] ===  9 ).is( m4a[ 2 ][ 1 ] === 10 ).is( m4a[ 2 ][ 2 ] === 12 ).is( m4a[ 2 ][ 3 ] === 12 )
	.is( m4a[ 3 ][ 0 ] === 13 ).is( m4a[ 3 ][ 1 ] === 14 ).is( m4a[ 3 ][ 2 ] === 15 ).is( m4a[ 3 ][ 3 ] === 17 )

	.is( m4b[ 0 ][ 0 ] === 1 ).is( m4b[ 0 ][ 1 ] === 0 ).is( m4b[ 0 ][ 2 ] === 0 ).is( m4b[ 0 ][ 3 ] === 0 )
	.is( m4b[ 1 ][ 0 ] === 0 ).is( m4b[ 1 ][ 1 ] === 1 ).is( m4b[ 1 ][ 2 ] === 0 ).is( m4b[ 1 ][ 3 ] === 0 )
	.is( m4b[ 2 ][ 0 ] === 0 ).is( m4b[ 2 ][ 1 ] === 0 ).is( m4b[ 2 ][ 2 ] === 1 ).is( m4b[ 2 ][ 3 ] === 0 )
	.is( m4b[ 3 ][ 0 ] === 0 ).is( m4b[ 3 ][ 1 ] === 0 ).is( m4b[ 3 ][ 2 ] === 0 ).is( m4b[ 3 ][ 3 ] === 1 )
	;
m4a.multiply( m4b ); test	
	.is( m4a[ 0 ][ 0 ] ===  2 ).is( m4a[ 0 ][ 1 ] ===  2 ).is( m4a[ 0 ][ 2 ] ===  3 ).is( m4a[ 0 ][ 3 ] ===  4 )
	.is( m4a[ 1 ][ 0 ] ===  5 ).is( m4a[ 1 ][ 1 ] ===  7 ).is( m4a[ 1 ][ 2 ] ===  7 ).is( m4a[ 1 ][ 3 ] ===  8 )
	.is( m4a[ 2 ][ 0 ] ===  9 ).is( m4a[ 2 ][ 1 ] === 10 ).is( m4a[ 2 ][ 2 ] === 12 ).is( m4a[ 2 ][ 3 ] === 12 )
	.is( m4a[ 3 ][ 0 ] === 13 ).is( m4a[ 3 ][ 1 ] === 14 ).is( m4a[ 3 ][ 2 ] === 15 ).is( m4a[ 3 ][ 3 ] === 17 )

	.is( m4b[ 0 ][ 0 ] === 1 ).is( m4b[ 0 ][ 1 ] === 0 ).is( m4b[ 0 ][ 2 ] === 0 ).is( m4b[ 0 ][ 3 ] === 0 )
	.is( m4b[ 1 ][ 0 ] === 0 ).is( m4b[ 1 ][ 1 ] === 1 ).is( m4b[ 1 ][ 2 ] === 0 ).is( m4b[ 1 ][ 3 ] === 0 )
	.is( m4b[ 2 ][ 0 ] === 0 ).is( m4b[ 2 ][ 1 ] === 0 ).is( m4b[ 2 ][ 2 ] === 1 ).is( m4b[ 2 ][ 3 ] === 0 )
	.is( m4b[ 3 ][ 0 ] === 0 ).is( m4b[ 3 ][ 1 ] === 0 ).is( m4b[ 3 ][ 2 ] === 0 ).is( m4b[ 3 ][ 3 ] === 1 )
	;
m4a.addScalar( 1 ); test	
	.is( m4a[ 0 ][ 0 ] ===  3 ).is( m4a[ 0 ][ 1 ] ===  3 ).is( m4a[ 0 ][ 2 ] ===  4 ).is( m4a[ 0 ][ 3 ] ===  5 )
	.is( m4a[ 1 ][ 0 ] ===  6 ).is( m4a[ 1 ][ 1 ] ===  8 ).is( m4a[ 1 ][ 2 ] ===  8 ).is( m4a[ 1 ][ 3 ] ===  9 )
	.is( m4a[ 2 ][ 0 ] === 10 ).is( m4a[ 2 ][ 1 ] === 11 ).is( m4a[ 2 ][ 2 ] === 13 ).is( m4a[ 2 ][ 3 ] === 13 )
	.is( m4a[ 3 ][ 0 ] === 14 ).is( m4a[ 3 ][ 1 ] === 15 ).is( m4a[ 3 ][ 2 ] === 16 ).is( m4a[ 3 ][ 3 ] === 18 )
	;
m4a.multiplyScalar( 2 ); test
	.is( m4a[ 0 ][ 0 ] ===  6 ).is( m4a[ 0 ][ 1 ] ===  6 ).is( m4a[ 0 ][ 2 ] ===  8 ).is( m4a[ 0 ][ 3 ] === 10 )
	.is( m4a[ 1 ][ 0 ] === 12 ).is( m4a[ 1 ][ 1 ] === 16 ).is( m4a[ 1 ][ 2 ] === 16 ).is( m4a[ 1 ][ 3 ] === 18 )
	.is( m4a[ 2 ][ 0 ] === 20 ).is( m4a[ 2 ][ 1 ] === 22 ).is( m4a[ 2 ][ 2 ] === 26 ).is( m4a[ 2 ][ 3 ] === 26 )
	.is( m4a[ 3 ][ 0 ] === 28 ).is( m4a[ 3 ][ 1 ] === 30 ).is( m4a[ 3 ][ 2 ] === 32 ).is( m4a[ 3 ][ 3 ] === 36 )
	;
var m4c = mat4.add( m4a, m4b ); test
	.is( m4a[ 0 ][ 0 ] ===  6 ).is( m4a[ 0 ][ 1 ] ===  6 ).is( m4a[ 0 ][ 2 ] ===  8 ).is( m4a[ 0 ][ 3 ] === 10 )
	.is( m4a[ 1 ][ 0 ] === 12 ).is( m4a[ 1 ][ 1 ] === 16 ).is( m4a[ 1 ][ 2 ] === 16 ).is( m4a[ 1 ][ 3 ] === 18 )
	.is( m4a[ 2 ][ 0 ] === 20 ).is( m4a[ 2 ][ 1 ] === 22 ).is( m4a[ 2 ][ 2 ] === 26 ).is( m4a[ 2 ][ 3 ] === 26 )
	.is( m4a[ 3 ][ 0 ] === 28 ).is( m4a[ 3 ][ 1 ] === 30 ).is( m4a[ 3 ][ 2 ] === 32 ).is( m4a[ 3 ][ 3 ] === 36 )

	.is( m4b[ 0 ][ 0 ] === 1 ).is( m4b[ 0 ][ 1 ] === 0 ).is( m4b[ 0 ][ 2 ] === 0 ).is( m4b[ 0 ][ 3 ] === 0 )
	.is( m4b[ 1 ][ 0 ] === 0 ).is( m4b[ 1 ][ 1 ] === 1 ).is( m4b[ 1 ][ 2 ] === 0 ).is( m4b[ 1 ][ 3 ] === 0 )
	.is( m4b[ 2 ][ 0 ] === 0 ).is( m4b[ 2 ][ 1 ] === 0 ).is( m4b[ 2 ][ 2 ] === 1 ).is( m4b[ 2 ][ 3 ] === 0 )
	.is( m4b[ 3 ][ 0 ] === 0 ).is( m4b[ 3 ][ 1 ] === 0 ).is( m4b[ 3 ][ 2 ] === 0 ).is( m4b[ 3 ][ 3 ] === 1 )

	.is( m4c[ 0 ][ 0 ] ===  7 ).is( m4c[ 0 ][ 1 ] ===  6 ).is( m4c[ 0 ][ 2 ] ===  8 ).is( m4c[ 0 ][ 3 ] === 10 )
	.is( m4c[ 1 ][ 0 ] === 12 ).is( m4c[ 1 ][ 1 ] === 17 ).is( m4c[ 1 ][ 2 ] === 16 ).is( m4c[ 1 ][ 3 ] === 18 )
	.is( m4c[ 2 ][ 0 ] === 20 ).is( m4c[ 2 ][ 1 ] === 22 ).is( m4c[ 2 ][ 2 ] === 27 ).is( m4c[ 2 ][ 3 ] === 26 )
	.is( m4c[ 3 ][ 0 ] === 28 ).is( m4c[ 3 ][ 1 ] === 30 ).is( m4c[ 3 ][ 2 ] === 32 ).is( m4c[ 3 ][ 3 ] === 37 )
	;
var m4c = mat4.addScalar( m4a, 1 ); test
	.is( m4a[ 0 ][ 0 ] ===  6 ).is( m4a[ 0 ][ 1 ] ===  6 ).is( m4a[ 0 ][ 2 ] ===  8 ).is( m4a[ 0 ][ 3 ] === 10 )
	.is( m4a[ 1 ][ 0 ] === 12 ).is( m4a[ 1 ][ 1 ] === 16 ).is( m4a[ 1 ][ 2 ] === 16 ).is( m4a[ 1 ][ 3 ] === 18 )
	.is( m4a[ 2 ][ 0 ] === 20 ).is( m4a[ 2 ][ 1 ] === 22 ).is( m4a[ 2 ][ 2 ] === 26 ).is( m4a[ 2 ][ 3 ] === 26 )
	.is( m4a[ 3 ][ 0 ] === 28 ).is( m4a[ 3 ][ 1 ] === 30 ).is( m4a[ 3 ][ 2 ] === 32 ).is( m4a[ 3 ][ 3 ] === 36 )

	.is( m4c[ 0 ][ 0 ] ===  7 ).is( m4c[ 0 ][ 1 ] ===  7 ).is( m4c[ 0 ][ 2 ] ===  9 ).is( m4c[ 0 ][ 3 ] === 11 )
	.is( m4c[ 1 ][ 0 ] === 13 ).is( m4c[ 1 ][ 1 ] === 17 ).is( m4c[ 1 ][ 2 ] === 17 ).is( m4c[ 1 ][ 3 ] === 19 )
	.is( m4c[ 2 ][ 0 ] === 21 ).is( m4c[ 2 ][ 1 ] === 23 ).is( m4c[ 2 ][ 2 ] === 27 ).is( m4c[ 2 ][ 3 ] === 27 )
	.is( m4c[ 3 ][ 0 ] === 29 ).is( m4c[ 3 ][ 1 ] === 31 ).is( m4c[ 3 ][ 2 ] === 33 ).is( m4c[ 3 ][ 3 ] === 37 )
	;
var m4c = mat4.multiply( m4a, m4b ); test
	.is( m4a[ 0 ][ 0 ] ===  6 ).is( m4a[ 0 ][ 1 ] ===  6 ).is( m4a[ 0 ][ 2 ] ===  8 ).is( m4a[ 0 ][ 3 ] === 10 )
	.is( m4a[ 1 ][ 0 ] === 12 ).is( m4a[ 1 ][ 1 ] === 16 ).is( m4a[ 1 ][ 2 ] === 16 ).is( m4a[ 1 ][ 3 ] === 18 )
	.is( m4a[ 2 ][ 0 ] === 20 ).is( m4a[ 2 ][ 1 ] === 22 ).is( m4a[ 2 ][ 2 ] === 26 ).is( m4a[ 2 ][ 3 ] === 26 )
	.is( m4a[ 3 ][ 0 ] === 28 ).is( m4a[ 3 ][ 1 ] === 30 ).is( m4a[ 3 ][ 2 ] === 32 ).is( m4a[ 3 ][ 3 ] === 36 )

	.is( m4b[ 0 ][ 0 ] === 1 ).is( m4b[ 0 ][ 1 ] === 0 ).is( m4b[ 0 ][ 2 ] === 0 ).is( m4b[ 0 ][ 3 ] === 0 )
	.is( m4b[ 1 ][ 0 ] === 0 ).is( m4b[ 1 ][ 1 ] === 1 ).is( m4b[ 1 ][ 2 ] === 0 ).is( m4b[ 1 ][ 3 ] === 0 )
	.is( m4b[ 2 ][ 0 ] === 0 ).is( m4b[ 2 ][ 1 ] === 0 ).is( m4b[ 2 ][ 2 ] === 1 ).is( m4b[ 2 ][ 3 ] === 0 )
	.is( m4b[ 3 ][ 0 ] === 0 ).is( m4b[ 3 ][ 1 ] === 0 ).is( m4b[ 3 ][ 2 ] === 0 ).is( m4b[ 3 ][ 3 ] === 1 )

	.is( m4c[ 0 ][ 0 ] ===  6 ).is( m4c[ 0 ][ 1 ] ===  6 ).is( m4c[ 0 ][ 2 ] ===  8 ).is( m4c[ 0 ][ 3 ] === 10 )
	.is( m4c[ 1 ][ 0 ] === 12 ).is( m4c[ 1 ][ 1 ] === 16 ).is( m4c[ 1 ][ 2 ] === 16 ).is( m4c[ 1 ][ 3 ] === 18 )
	.is( m4c[ 2 ][ 0 ] === 20 ).is( m4c[ 2 ][ 1 ] === 22 ).is( m4c[ 2 ][ 2 ] === 26 ).is( m4c[ 2 ][ 3 ] === 26 )
	.is( m4c[ 3 ][ 0 ] === 28 ).is( m4c[ 3 ][ 1 ] === 30 ).is( m4c[ 3 ][ 2 ] === 32 ).is( m4c[ 3 ][ 3 ] === 36 )
	;	
var m4c = mat4.multiplyScalar( m4a, 2 ); test
	.is( m4a[ 0 ][ 0 ] ===  6 ).is( m4a[ 0 ][ 1 ] ===  6 ).is( m4a[ 0 ][ 2 ] ===  8 ).is( m4a[ 0 ][ 3 ] === 10 )
	.is( m4a[ 1 ][ 0 ] === 12 ).is( m4a[ 1 ][ 1 ] === 16 ).is( m4a[ 1 ][ 2 ] === 16 ).is( m4a[ 1 ][ 3 ] === 18 )
	.is( m4a[ 2 ][ 0 ] === 20 ).is( m4a[ 2 ][ 1 ] === 22 ).is( m4a[ 2 ][ 2 ] === 26 ).is( m4a[ 2 ][ 3 ] === 26 )
	.is( m4a[ 3 ][ 0 ] === 28 ).is( m4a[ 3 ][ 1 ] === 30 ).is( m4a[ 3 ][ 2 ] === 32 ).is( m4a[ 3 ][ 3 ] === 36 )

	.is( m4c[ 0 ][ 0 ] === 12 ).is( m4c[ 0 ][ 1 ] === 12 ).is( m4c[ 0 ][ 2 ] === 16 ).is( m4c[ 0 ][ 3 ] === 20 )
	.is( m4c[ 1 ][ 0 ] === 24 ).is( m4c[ 1 ][ 1 ] === 32 ).is( m4c[ 1 ][ 2 ] === 32 ).is( m4c[ 1 ][ 3 ] === 36 )
	.is( m4c[ 2 ][ 0 ] === 40 ).is( m4c[ 2 ][ 1 ] === 44 ).is( m4c[ 2 ][ 2 ] === 52 ).is( m4c[ 2 ][ 3 ] === 52 )
	.is( m4c[ 3 ][ 0 ] === 56 ).is( m4c[ 3 ][ 1 ] === 60 ).is( m4c[ 3 ][ 2 ] === 64 ).is( m4c[ 3 ][ 3 ] === 72 )
	;
m4a.invert(); test
	.is( m4a[ 0 ][ 0 ] === -0.15853658318519592  ).is( m4a[ 0 ][ 1 ] === -0.353658527135849    ).is( m4a[ 0 ][ 2 ] === -0.04878048598766327 ).is( m4a[ 0 ][ 3 ] === 0.25609755516052246 )
	.is( m4a[ 1 ][ 0 ] === -0.31707316637039185  ).is( m4a[ 1 ][ 1 ] ===  0.2926829159259796   ).is( m4a[ 1 ][ 2 ] === -0.09756097197532654 ).is( m4a[ 1 ][ 3 ] === 0.012195121496915817 )
	.is( m4a[ 2 ][ 0 ] ===  0.024390242993831635 ).is( m4a[ 2 ][ 1 ] === -0.060975611209869385 ).is( m4a[ 2 ][ 2 ] ===  0.353658527135849   ).is( m4a[ 2 ][ 3 ] === -0.23170731961727142 )
	.is( m4a[ 3 ][ 0 ] ===  0.3658536672592163   ).is( m4a[ 3 ][ 1 ] ===  0.08536585420370102  ).is( m4a[ 3 ][ 2 ] === -0.19512194395065308 ).is( m4a[ 3 ][ 3 ] === 0.024390242993831635 )
	; // console.log( m4a.data );

let m4a = new Float32Array( 16 );
mat4.makePerspective( m4a, 1, 90, 1, 10 ); console.log( m4a ); test
	.is( m4a[  0 ] === 0.6173696517944336   ).is( m4a[  1 ] === 0                    ).is( m4a[  2 ] ===  0                  ).is( m4a[  3 ] ===  0 )
	.is( m4a[  4 ] === 0                    ).is( m4a[  5 ] === 0.6173696517944336   ).is( m4a[  6 ] ===  0                  ).is( m4a[  7 ] ===  0 )
	.is( m4a[  8 ] === 0                    ).is( m4a[  9 ] === 0                    ).is( m4a[ 10 ] === -1.2222222089767456 ).is( m4a[ 11 ] === -1 )
	.is( m4a[ 12 ] === 0                    ).is( m4a[ 13 ] === 0                    ).is( m4a[ 14 ] === -2.222222328186035  ).is( m4a[ 15 ] ===  0 )/*
	; //console.log( m4a.data );
m4a.Orthographic( 0, 100, 0, 100, 1, 10 ); test
	.is( m4a[ 0 ][ 0 ] === 0.019999999552965164 ).is( m4a[ 0 ][ 1 ] === 0                    ).is( m4a[ 0 ][ 2 ] ===  0                  ).is( m4a[ 0 ][ 3 ] ===  0 )
	.is( m4a[ 1 ][ 0 ] === 0                    ).is( m4a[ 1 ][ 1 ] === 0.019999999552965164 ).is( m4a[ 1 ][ 2 ] ===  0                  ).is( m4a[ 1 ][ 3 ] ===  0 )
	.is( m4a[ 2 ][ 0 ] === 0                    ).is( m4a[ 2 ][ 1 ] === 0                    ).is( m4a[ 2 ][ 2 ] === -0.2222222238779068 ).is( m4a[ 2 ][ 3 ] ===  0 )
	.is( m4a[ 3 ][ 0 ] === -1                   ).is( m4a[ 3 ][ 1 ] === -1                   ).is( m4a[ 3 ][ 2 ] === -1.2222222089767456 ).is( m4a[ 3 ][ 3 ] ===  1 )
	; //console.log( m4a.data );
m4a.Identity().rotate( 1, 1, 1, 1 ); test
	.is( m4a[ 0 ][ 0 ] ===  0.6935348510742188  ).is( m4a[ 0 ][ 1 ] ===  0.6390560865402222  ).is( m4a[ 0 ][ 2 ] === -0.3325909376144409 ).is( m4a[ 0 ][ 3 ] ===  0 )
	.is( m4a[ 1 ][ 0 ] === -0.3325909376144409  ).is( m4a[ 1 ][ 1 ] ===  0.6935348510742188  ).is( m4a[ 1 ][ 2 ] ===  0.6390560865402222 ).is( m4a[ 1 ][ 3 ] ===  0 )
	.is( m4a[ 2 ][ 0 ] ===  0.6390560865402222  ).is( m4a[ 2 ][ 1 ] === -0.3325909376144409  ).is( m4a[ 2 ][ 2 ] ===  0.6935348510742188 ).is( m4a[ 2 ][ 3 ] ===  0 )
	.is( m4a[ 3 ][ 0 ] ===  0                   ).is( m4a[ 3 ][ 1 ] ===  0                   ).is( m4a[ 3 ][ 2 ] ===  0                  ).is( m4a[ 3 ][ 3 ] ===  1 )
	; //console.log( m4a.data );
m4a.Identity().translate( 1, 1, 1 ); test
	.is( m4a[ 0 ][ 0 ] ===  1					).is( m4a[ 0 ][ 1 ] ===  0				     ).is( m4a[ 0 ][ 2 ] ===  0					 ).is( m4a[ 0 ][ 3 ] ===  0 )
	.is( m4a[ 1 ][ 0 ] ===  0  					).is( m4a[ 1 ][ 1 ] ===  1					 ).is( m4a[ 1 ][ 2 ] ===  0					 ).is( m4a[ 1 ][ 3 ] ===  0 )
	.is( m4a[ 2 ][ 0 ] ===  0				  	).is( m4a[ 2 ][ 1 ] ===  0					 ).is( m4a[ 2 ][ 2 ] ===  1					 ).is( m4a[ 2 ][ 3 ] ===  0 )
	.is( m4a[ 3 ][ 0 ] ===  1                   ).is( m4a[ 3 ][ 1 ] ===  1                   ).is( m4a[ 3 ][ 2 ] ===  1                  ).is( m4a[ 3 ][ 3 ] ===  1 )
	;
m4a.Identity().scale( 1, 2, 3 ); test
	.is( m4a[ 0 ][ 0 ] ===  1					).is( m4a[ 0 ][ 1 ] ===  0				     ).is( m4a[ 0 ][ 2 ] ===  0					 ).is( m4a[ 0 ][ 3 ] ===  0 )
	.is( m4a[ 1 ][ 0 ] ===  0  					).is( m4a[ 1 ][ 1 ] ===  2					 ).is( m4a[ 1 ][ 2 ] ===  0					 ).is( m4a[ 1 ][ 3 ] ===  0 )
	.is( m4a[ 2 ][ 0 ] ===  0				  	).is( m4a[ 2 ][ 1 ] ===  0					 ).is( m4a[ 2 ][ 2 ] ===  3					 ).is( m4a[ 2 ][ 3 ] ===  0 )
	.is( m4a[ 3 ][ 0 ] ===  0                   ).is( m4a[ 3 ][ 1 ] ===  0                   ).is( m4a[ 3 ][ 2 ] ===  0                  ).is( m4a[ 3 ][ 3 ] ===  1 )
	;

*/